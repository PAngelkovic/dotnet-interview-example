@using IC.DotNet.Interview.Logic.Models; 
@model IC.DotNet.Interview.Logic.Models.TaskViewModel

@{
    ViewBag.Title = "Edit";
    List<UserViewModel> userList = ViewBag.Users;
}

<h2>Edit Task</h2>

@if (Model != null)
{
    using (Html.BeginForm("Edit", "Task", "POST"))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @*@Html.HiddenFor(model => model.AssignedUser.Id)
            @Html.HiddenFor(model => model.AssignedUser.Username)*@

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" }) @*These are in case we set restrictions/validations on the model fields*@
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsFinished, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsFinished)
                        @Html.ValidationMessageFor(model => model.IsFinished, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AssignedUser, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => Model.AssignedUser.Id, new SelectList(userList, "Id", "Username"), htmlAttributes: new { @class = "form-control", id = "Country" })
                    @Html.ValidationMessageFor(x => Model.AssignedUser.Id, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }
}
else
{
    <h2>No such task was found!</h2>
}

<div>
    @Html.ActionLink("Back to Task List", "Index", null, new { @class = "btn" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
